{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b00701ff-67bf-4941-a26a-11ae75f11ed1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing libraries \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ef52972d-c274-4680-93a6-eb8fc2f6811c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import data\n",
    "path = \"/Users/Glebazzz/Jupiter/04.25 Instacart Basket Analysis\" \n",
    "df = pd.read_csv(os.path.join(path, '02 Data', 'Original Data', 'customers.csv'))\n",
    "ords_prods_merge = pd.read_pickle(os.path.join(path, '02 Data', 'Prepared data', 'ords_prods_merged_flags.pkl'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9cb43191-b605-4631-8408-72a72e2fe223",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>First Name</th>\n",
       "      <th>Surnam</th>\n",
       "      <th>Gender</th>\n",
       "      <th>STATE</th>\n",
       "      <th>Age</th>\n",
       "      <th>date_joined</th>\n",
       "      <th>n_dependants</th>\n",
       "      <th>fam_status</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26711</td>\n",
       "      <td>Deborah</td>\n",
       "      <td>Esquivel</td>\n",
       "      <td>Female</td>\n",
       "      <td>Missouri</td>\n",
       "      <td>48</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>3</td>\n",
       "      <td>married</td>\n",
       "      <td>165665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>33890</td>\n",
       "      <td>Patricia</td>\n",
       "      <td>Hart</td>\n",
       "      <td>Female</td>\n",
       "      <td>New Mexico</td>\n",
       "      <td>36</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>0</td>\n",
       "      <td>single</td>\n",
       "      <td>59285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>65803</td>\n",
       "      <td>Kenneth</td>\n",
       "      <td>Farley</td>\n",
       "      <td>Male</td>\n",
       "      <td>Idaho</td>\n",
       "      <td>35</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>2</td>\n",
       "      <td>married</td>\n",
       "      <td>99568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>125935</td>\n",
       "      <td>Michelle</td>\n",
       "      <td>Hicks</td>\n",
       "      <td>Female</td>\n",
       "      <td>Iowa</td>\n",
       "      <td>40</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>0</td>\n",
       "      <td>single</td>\n",
       "      <td>42049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>130797</td>\n",
       "      <td>Ann</td>\n",
       "      <td>Gilmore</td>\n",
       "      <td>Female</td>\n",
       "      <td>Maryland</td>\n",
       "      <td>26</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>40374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206204</th>\n",
       "      <td>168073</td>\n",
       "      <td>Lisa</td>\n",
       "      <td>Case</td>\n",
       "      <td>Female</td>\n",
       "      <td>North Carolina</td>\n",
       "      <td>44</td>\n",
       "      <td>4/1/2020</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>148828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206205</th>\n",
       "      <td>49635</td>\n",
       "      <td>Jeremy</td>\n",
       "      <td>Robbins</td>\n",
       "      <td>Male</td>\n",
       "      <td>Hawaii</td>\n",
       "      <td>62</td>\n",
       "      <td>4/1/2020</td>\n",
       "      <td>3</td>\n",
       "      <td>married</td>\n",
       "      <td>168639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206206</th>\n",
       "      <td>135902</td>\n",
       "      <td>Doris</td>\n",
       "      <td>Richmond</td>\n",
       "      <td>Female</td>\n",
       "      <td>Missouri</td>\n",
       "      <td>66</td>\n",
       "      <td>4/1/2020</td>\n",
       "      <td>2</td>\n",
       "      <td>married</td>\n",
       "      <td>53374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206207</th>\n",
       "      <td>81095</td>\n",
       "      <td>Rose</td>\n",
       "      <td>Rollins</td>\n",
       "      <td>Female</td>\n",
       "      <td>California</td>\n",
       "      <td>27</td>\n",
       "      <td>4/1/2020</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>99799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206208</th>\n",
       "      <td>80148</td>\n",
       "      <td>Cynthia</td>\n",
       "      <td>Noble</td>\n",
       "      <td>Female</td>\n",
       "      <td>New York</td>\n",
       "      <td>55</td>\n",
       "      <td>4/1/2020</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>57095</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>206209 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        user_id First Name    Surnam  Gender           STATE  Age date_joined  \\\n",
       "0         26711    Deborah  Esquivel  Female        Missouri   48    1/1/2017   \n",
       "1         33890   Patricia      Hart  Female      New Mexico   36    1/1/2017   \n",
       "2         65803    Kenneth    Farley    Male           Idaho   35    1/1/2017   \n",
       "3        125935   Michelle     Hicks  Female            Iowa   40    1/1/2017   \n",
       "4        130797        Ann   Gilmore  Female        Maryland   26    1/1/2017   \n",
       "...         ...        ...       ...     ...             ...  ...         ...   \n",
       "206204   168073       Lisa      Case  Female  North Carolina   44    4/1/2020   \n",
       "206205    49635     Jeremy   Robbins    Male          Hawaii   62    4/1/2020   \n",
       "206206   135902      Doris  Richmond  Female        Missouri   66    4/1/2020   \n",
       "206207    81095       Rose   Rollins  Female      California   27    4/1/2020   \n",
       "206208    80148    Cynthia     Noble  Female        New York   55    4/1/2020   \n",
       "\n",
       "        n_dependants fam_status  income  \n",
       "0                  3    married  165665  \n",
       "1                  0     single   59285  \n",
       "2                  2    married   99568  \n",
       "3                  0     single   42049  \n",
       "4                  1    married   40374  \n",
       "...              ...        ...     ...  \n",
       "206204             1    married  148828  \n",
       "206205             3    married  168639  \n",
       "206206             2    married   53374  \n",
       "206207             1    married   99799  \n",
       "206208             1    married   57095  \n",
       "\n",
       "[206209 rows x 10 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a511c596-020d-49e3-ad6c-4caedc5fe961",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "206209"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ords_prods_merge['user_id'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ec7043d0-b7e2-44c9-84f7-802fa4a0bf4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "206209"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['user_id'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fd99ec01-e9b4-4695-ac06-4b3ec0aca27f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Renaming some colomns \n",
    "df.rename(columns = {'Surnam' : 'Second Name'}, inplace = True)\n",
    "df.rename(columns = {'STATE' : 'State'}, inplace = True)\n",
    "df.rename(columns = {'n_dependants' : 'houshold'}, inplace = True)\n",
    "df.rename(columns = {'income' : 'income USD'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f7c317b6-392a-46ce-b1c5-6e3ca8b7843f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mixed types found in column: First Name\n"
     ]
    }
   ],
   "source": [
    "#Checking for mixed types\n",
    "for col in df.columns.tolist():\n",
    "    if df[col].map(type).nunique() > 1:\n",
    "        print(f\"Mixed types found in column: {col}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "38893d88-f2cb-43fa-9875-bd8391d761c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>First Name</th>\n",
       "      <th>Second Name</th>\n",
       "      <th>Gender</th>\n",
       "      <th>State</th>\n",
       "      <th>Age</th>\n",
       "      <th>date_joined</th>\n",
       "      <th>houshold</th>\n",
       "      <th>fam_status</th>\n",
       "      <th>income USD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26711</td>\n",
       "      <td>Deborah</td>\n",
       "      <td>Esquivel</td>\n",
       "      <td>Female</td>\n",
       "      <td>Missouri</td>\n",
       "      <td>48</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>3</td>\n",
       "      <td>married</td>\n",
       "      <td>165665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>33890</td>\n",
       "      <td>Patricia</td>\n",
       "      <td>Hart</td>\n",
       "      <td>Female</td>\n",
       "      <td>New Mexico</td>\n",
       "      <td>36</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>0</td>\n",
       "      <td>single</td>\n",
       "      <td>59285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>65803</td>\n",
       "      <td>Kenneth</td>\n",
       "      <td>Farley</td>\n",
       "      <td>Male</td>\n",
       "      <td>Idaho</td>\n",
       "      <td>35</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>2</td>\n",
       "      <td>married</td>\n",
       "      <td>99568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>125935</td>\n",
       "      <td>Michelle</td>\n",
       "      <td>Hicks</td>\n",
       "      <td>Female</td>\n",
       "      <td>Iowa</td>\n",
       "      <td>40</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>0</td>\n",
       "      <td>single</td>\n",
       "      <td>42049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>130797</td>\n",
       "      <td>Ann</td>\n",
       "      <td>Gilmore</td>\n",
       "      <td>Female</td>\n",
       "      <td>Maryland</td>\n",
       "      <td>26</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>40374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>86389</td>\n",
       "      <td>Stephen</td>\n",
       "      <td>Murillo</td>\n",
       "      <td>Male</td>\n",
       "      <td>Vermont</td>\n",
       "      <td>69</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>3</td>\n",
       "      <td>married</td>\n",
       "      <td>66800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>102956</td>\n",
       "      <td>Kathy</td>\n",
       "      <td>Mitchell</td>\n",
       "      <td>Female</td>\n",
       "      <td>Missouri</td>\n",
       "      <td>78</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>96314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>180919</td>\n",
       "      <td>Jacqueline</td>\n",
       "      <td>Roach</td>\n",
       "      <td>Female</td>\n",
       "      <td>Nebraska</td>\n",
       "      <td>21</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>3</td>\n",
       "      <td>living with parents and siblings</td>\n",
       "      <td>56831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>74155</td>\n",
       "      <td>Karen</td>\n",
       "      <td>Berg</td>\n",
       "      <td>Female</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>33</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>3</td>\n",
       "      <td>married</td>\n",
       "      <td>95285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>96166</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Oconnor</td>\n",
       "      <td>Male</td>\n",
       "      <td>Oklahoma</td>\n",
       "      <td>51</td>\n",
       "      <td>1/1/2017</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>155673</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    user_id  First Name Second Name  Gender       State  Age date_joined  \\\n",
       "0     26711     Deborah    Esquivel  Female    Missouri   48    1/1/2017   \n",
       "1     33890    Patricia        Hart  Female  New Mexico   36    1/1/2017   \n",
       "2     65803     Kenneth      Farley    Male       Idaho   35    1/1/2017   \n",
       "3    125935    Michelle       Hicks  Female        Iowa   40    1/1/2017   \n",
       "4    130797         Ann     Gilmore  Female    Maryland   26    1/1/2017   \n",
       "..      ...         ...         ...     ...         ...  ...         ...   \n",
       "95    86389     Stephen     Murillo    Male     Vermont   69    1/1/2017   \n",
       "96   102956       Kathy    Mitchell  Female    Missouri   78    1/1/2017   \n",
       "97   180919  Jacqueline       Roach  Female    Nebraska   21    1/1/2017   \n",
       "98    74155       Karen        Berg  Female     Alabama   33    1/1/2017   \n",
       "99    96166         NaN     Oconnor    Male    Oklahoma   51    1/1/2017   \n",
       "\n",
       "    houshold                        fam_status  income USD  \n",
       "0          3                           married      165665  \n",
       "1          0                            single       59285  \n",
       "2          2                           married       99568  \n",
       "3          0                            single       42049  \n",
       "4          1                           married       40374  \n",
       "..       ...                               ...         ...  \n",
       "95         3                           married       66800  \n",
       "96         1                           married       96314  \n",
       "97         3  living with parents and siblings       56831  \n",
       "98         3                           married       95285  \n",
       "99         1                           married      155673  \n",
       "\n",
       "[100 rows x 10 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a706f137-3999-4164-90ac-ac986be6e6e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(206209, 10)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "156e49db-dc0e-4341-a7c6-1d3236db8caa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find out the the missing values \n",
    "df_clean = df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a3cbfb02-64d9-49c1-87fb-97f6adb07c07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10,)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8de3f832-8575-4001-b268-c0de6b588c66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id            0\n",
       "First Name     11259\n",
       "Second Name        0\n",
       "Gender             0\n",
       "State              0\n",
       "Age                0\n",
       "date_joined        0\n",
       "houshold           0\n",
       "fam_status         0\n",
       "income USD         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b9217dd-e47e-4d5e-b4d6-f220704b132e",
   "metadata": {},
   "source": [
    "Most of the data is clean. Only First Name has missing values â€” exactly 11,259 missing entries. If I drop the 11259 rows that contain missing values nan in the First _name column from df_customers datarame, it will leave only 194950 user_id. which means I will lose all orders information of the 11259 dropped user_id, because these dropped user_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "11c7ed50-d514-4ad7-a577-32dc587a4c1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove duplicates\n",
    "df = df.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "64b16b41-6f9d-43f5-a28d-676f6386cf4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop rows with missing user_id (if any)\n",
    "df = df[df['user_id'].notna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "201123d0-c103-410f-ba91-2924a9588e6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop rows with missing values\n",
    "df_clean = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "52f02f49-a785-456d-9dbf-56d37831cd16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop unwanted columns from ords_prods_merge\n",
    "ords_prods_merge = ords_prods_merge.drop(columns=['_merge', 'Unnamed: 0.1'], errors='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a1a10c45-5039-4cc9-b4d1-c2f0b9d03592",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id         int64\n",
       "First Name     object\n",
       "Second Name    object\n",
       "Gender         object\n",
       "State          object\n",
       "Age             int64\n",
       "date_joined    object\n",
       "houshold        int64\n",
       "fam_status     object\n",
       "income USD      int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "37a9df07-6404-4bf2-8aa8-5330ffb10770",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "product_id                  int64\n",
       "product_name               object\n",
       "aisle_id                    int64\n",
       "department_id               int64\n",
       "prices                    float64\n",
       "order_id                    int64\n",
       "user_id                     int64\n",
       "order_number                int64\n",
       "orders_day_of_week          int64\n",
       "hour                        int64\n",
       "days_since_prior_order    float64\n",
       "add_to_cart_order           int64\n",
       "reordered                   int64\n",
       "price_range_loc            object\n",
       "busiest_day                object\n",
       "busiest_days               object\n",
       "busiest_period_of_day      object\n",
       "max_order                   int64\n",
       "loyalty_flag               object\n",
       "avg_value                 float64\n",
       "spenders_flag              object\n",
       "frequency                 float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ords_prods_merge.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "64b59f06-d400-45d1-afa3-f1c8ed3fc079",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop missing values\n",
    "ords_prods_merge = ords_prods_merge.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "813e49f2-ff6c-40a5-aac5-1528627b089b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find out the the missing values \n",
    "ords_miss = ords_prods_merge.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ffeb6038-53c3-4344-b7fe-e8ab8ead79c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "product_id                0\n",
       "product_name              0\n",
       "aisle_id                  0\n",
       "department_id             0\n",
       "prices                    0\n",
       "order_id                  0\n",
       "user_id                   0\n",
       "order_number              0\n",
       "orders_day_of_week        0\n",
       "hour                      0\n",
       "days_since_prior_order    0\n",
       "add_to_cart_order         0\n",
       "reordered                 0\n",
       "price_range_loc           0\n",
       "busiest_day               0\n",
       "busiest_days              0\n",
       "busiest_period_of_day     0\n",
       "max_order                 0\n",
       "loyalty_flag              0\n",
       "avg_value                 0\n",
       "spenders_flag             0\n",
       "frequency                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ords_miss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "de714a0b-da0e-42d3-b198-26a2e3715c82",
   "metadata": {},
   "outputs": [],
   "source": [
    "ords_prods_merge_clean = ords_prods_merge.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b8f98234-ba27-45c0-afd9-3d4c75c7b3bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "product_id                0\n",
       "product_name              0\n",
       "aisle_id                  0\n",
       "department_id             0\n",
       "prices                    0\n",
       "order_id                  0\n",
       "user_id                   0\n",
       "order_number              0\n",
       "orders_day_of_week        0\n",
       "hour                      0\n",
       "days_since_prior_order    0\n",
       "add_to_cart_order         0\n",
       "reordered                 0\n",
       "price_range_loc           0\n",
       "busiest_day               0\n",
       "busiest_days              0\n",
       "busiest_period_of_day     0\n",
       "max_order                 0\n",
       "loyalty_flag              0\n",
       "avg_value                 0\n",
       "spenders_flag             0\n",
       "frequency                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Find out the the missing values \n",
    "ords_miss = ords_prods_merge_clean.isna().sum()\n",
    "ords_miss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d8a2597-6479-456a-a4f6-c8346a7ca327",
   "metadata": {},
   "source": [
    "#changing data type\n",
    "ords_prods_merge_clean.loc[:, 'user_id'] = ords_prods_merge_clean['user_id'].astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "8b2527ef-5b44-4339-bb2a-bc14ec7303da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df_clean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1969e90-1053-491a-bb8c-fff425bf3251",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "7ca2429b-0c58-427f-944f-c8d8f3fa11ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "ords_prods_merge_clean = ords_prods_merge_clean.drop(columns=['_merge'], errors='ignore')\n",
    "df_clean = df_clean.drop(columns=['_merge'], errors='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ced3e185-600f-4562-9f1d-563c3d8134aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge the cleaned orders-products dataframe with the user dataframe\n",
    "df_merged = ords_prods_merge_clean.merge(\n",
    "    right=df_clean,\n",
    "    on='user_id',\n",
    "    indicator=True,\n",
    "    how='inner'  \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "4f98df94-d216-463d-9a1e-e0be61cd3ee6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28668049, 32)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merged.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "43181b0d-6630-40a4-8d75-d13d026291f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>aisle_id</th>\n",
       "      <th>department_id</th>\n",
       "      <th>prices</th>\n",
       "      <th>order_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_number</th>\n",
       "      <th>orders_day_of_week</th>\n",
       "      <th>hour</th>\n",
       "      <th>days_since_prior_order</th>\n",
       "      <th>add_to_cart_order</th>\n",
       "      <th>reordered</th>\n",
       "      <th>max_order</th>\n",
       "      <th>avg_value</th>\n",
       "      <th>frequency</th>\n",
       "      <th>Age</th>\n",
       "      <th>houshold</th>\n",
       "      <th>income USD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "      <td>2.866805e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.559998e+04</td>\n",
       "      <td>7.119680e+01</td>\n",
       "      <td>9.920124e+00</td>\n",
       "      <td>1.191370e+01</td>\n",
       "      <td>1.710794e+06</td>\n",
       "      <td>1.029775e+05</td>\n",
       "      <td>1.822773e+01</td>\n",
       "      <td>2.739956e+00</td>\n",
       "      <td>1.341146e+01</td>\n",
       "      <td>1.111055e+01</td>\n",
       "      <td>8.358356e+00</td>\n",
       "      <td>6.298668e-01</td>\n",
       "      <td>3.415928e+01</td>\n",
       "      <td>1.186745e+01</td>\n",
       "      <td>1.111059e+01</td>\n",
       "      <td>4.947308e+01</td>\n",
       "      <td>1.501763e+00</td>\n",
       "      <td>9.956262e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.408181e+04</td>\n",
       "      <td>3.821447e+01</td>\n",
       "      <td>6.282188e+00</td>\n",
       "      <td>4.923769e+02</td>\n",
       "      <td>9.872633e+05</td>\n",
       "      <td>5.941699e+04</td>\n",
       "      <td>1.757197e+01</td>\n",
       "      <td>2.087829e+00</td>\n",
       "      <td>4.244997e+00</td>\n",
       "      <td>8.780114e+00</td>\n",
       "      <td>7.135146e+00</td>\n",
       "      <td>4.828402e-01</td>\n",
       "      <td>2.517863e+01</td>\n",
       "      <td>8.097007e+01</td>\n",
       "      <td>5.881622e+00</td>\n",
       "      <td>1.847837e+01</td>\n",
       "      <td>1.118522e+00</td>\n",
       "      <td>4.311802e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.800000e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>2.590300e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.354200e+04</td>\n",
       "      <td>3.100000e+01</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>4.200000e+00</td>\n",
       "      <td>8.561340e+05</td>\n",
       "      <td>5.156300e+04</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+01</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.400000e+01</td>\n",
       "      <td>7.395408e+00</td>\n",
       "      <td>6.759259e+00</td>\n",
       "      <td>3.400000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>6.719100e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.529500e+04</td>\n",
       "      <td>8.300000e+01</td>\n",
       "      <td>9.000000e+00</td>\n",
       "      <td>7.400000e+00</td>\n",
       "      <td>1.711162e+06</td>\n",
       "      <td>1.025870e+05</td>\n",
       "      <td>1.200000e+01</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>1.300000e+01</td>\n",
       "      <td>8.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.800000e+01</td>\n",
       "      <td>7.829594e+00</td>\n",
       "      <td>9.665893e+00</td>\n",
       "      <td>4.900000e+01</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>9.666100e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.794700e+04</td>\n",
       "      <td>1.070000e+02</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>1.130000e+01</td>\n",
       "      <td>2.565400e+06</td>\n",
       "      <td>1.543770e+05</td>\n",
       "      <td>2.500000e+01</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>1.500000e+01</td>\n",
       "      <td>1.100000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>4.800000e+01</td>\n",
       "      <td>8.255046e+00</td>\n",
       "      <td>1.444764e+01</td>\n",
       "      <td>6.500000e+01</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>1.280070e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.968800e+04</td>\n",
       "      <td>1.340000e+02</td>\n",
       "      <td>2.100000e+01</td>\n",
       "      <td>9.999900e+04</td>\n",
       "      <td>3.421082e+06</td>\n",
       "      <td>2.062090e+05</td>\n",
       "      <td>9.900000e+01</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>2.300000e+01</td>\n",
       "      <td>3.000000e+01</td>\n",
       "      <td>1.450000e+02</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>9.900000e+01</td>\n",
       "      <td>2.500542e+04</td>\n",
       "      <td>3.000000e+01</td>\n",
       "      <td>8.100000e+01</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>5.939010e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         product_id      aisle_id  department_id        prices      order_id  \\\n",
       "count  2.866805e+07  2.866805e+07   2.866805e+07  2.866805e+07  2.866805e+07   \n",
       "mean   2.559998e+04  7.119680e+01   9.920124e+00  1.191370e+01  1.710794e+06   \n",
       "std    1.408181e+04  3.821447e+01   6.282188e+00  4.923769e+02  9.872633e+05   \n",
       "min    1.000000e+00  1.000000e+00   1.000000e+00  1.000000e+00  2.000000e+00   \n",
       "25%    1.354200e+04  3.100000e+01   4.000000e+00  4.200000e+00  8.561340e+05   \n",
       "50%    2.529500e+04  8.300000e+01   9.000000e+00  7.400000e+00  1.711162e+06   \n",
       "75%    3.794700e+04  1.070000e+02   1.600000e+01  1.130000e+01  2.565400e+06   \n",
       "max    4.968800e+04  1.340000e+02   2.100000e+01  9.999900e+04  3.421082e+06   \n",
       "\n",
       "            user_id  order_number  orders_day_of_week          hour  \\\n",
       "count  2.866805e+07  2.866805e+07        2.866805e+07  2.866805e+07   \n",
       "mean   1.029775e+05  1.822773e+01        2.739956e+00  1.341146e+01   \n",
       "std    5.941699e+04  1.757197e+01        2.087829e+00  4.244997e+00   \n",
       "min    1.000000e+00  2.000000e+00        0.000000e+00  0.000000e+00   \n",
       "25%    5.156300e+04  6.000000e+00        1.000000e+00  1.000000e+01   \n",
       "50%    1.025870e+05  1.200000e+01        3.000000e+00  1.300000e+01   \n",
       "75%    1.543770e+05  2.500000e+01        5.000000e+00  1.600000e+01   \n",
       "max    2.062090e+05  9.900000e+01        6.000000e+00  2.300000e+01   \n",
       "\n",
       "       days_since_prior_order  add_to_cart_order     reordered     max_order  \\\n",
       "count            2.866805e+07       2.866805e+07  2.866805e+07  2.866805e+07   \n",
       "mean             1.111055e+01       8.358356e+00  6.298668e-01  3.415928e+01   \n",
       "std              8.780114e+00       7.135146e+00  4.828402e-01  2.517863e+01   \n",
       "min              0.000000e+00       1.000000e+00  0.000000e+00  3.000000e+00   \n",
       "25%              5.000000e+00       3.000000e+00  0.000000e+00  1.400000e+01   \n",
       "50%              8.000000e+00       6.000000e+00  1.000000e+00  2.800000e+01   \n",
       "75%              1.500000e+01       1.100000e+01  1.000000e+00  4.800000e+01   \n",
       "max              3.000000e+01       1.450000e+02  1.000000e+00  9.900000e+01   \n",
       "\n",
       "          avg_value     frequency           Age      houshold    income USD  \n",
       "count  2.866805e+07  2.866805e+07  2.866805e+07  2.866805e+07  2.866805e+07  \n",
       "mean   1.186745e+01  1.111059e+01  4.947308e+01  1.501763e+00  9.956262e+04  \n",
       "std    8.097007e+01  5.881622e+00  1.847837e+01  1.118522e+00  4.311802e+04  \n",
       "min    1.000000e+00  0.000000e+00  1.800000e+01  0.000000e+00  2.590300e+04  \n",
       "25%    7.395408e+00  6.759259e+00  3.400000e+01  1.000000e+00  6.719100e+04  \n",
       "50%    7.829594e+00  9.665893e+00  4.900000e+01  2.000000e+00  9.666100e+04  \n",
       "75%    8.255046e+00  1.444764e+01  6.500000e+01  3.000000e+00  1.280070e+05  \n",
       "max    2.500542e+04  3.000000e+01  8.100000e+01  3.000000e+00  5.939010e+05  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merged.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "91396741-a615-4205-a0ff-5228af368c4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "_merge\n",
       "both          28668049\n",
       "left_only            0\n",
       "right_only           0\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merged['_merge'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "2c4cbb93-1d90-4e05-9f6c-f68793c77f54",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Export the updated DataFrame\n",
    "df_merged.to_pickle(os.path.join(path, '02 Data', 'Prepared Data', 'orders_merged_customers.pkl'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a460a608-35d4-4352-a075-72137bb4b6de",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
